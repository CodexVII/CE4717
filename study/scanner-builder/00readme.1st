Scanner Synthesis using Python
==============================

Main scripts:

  re2nfa.py  -- Convert a regular expression (or a number of regular 
                expressions) on the command-line to an NFA using the
		subset construction.

		Use: 
		     $ ./re2nfa.py -help 
		to find out options available.

  nfa2dfa.py -- Convert a textual descriptpn of an NFA to a DFA using
                the subset algorithm.

		Use:
		     $ ./nfa2dfa.py -help
		for options.

Windows users.  Use the re2nfa.bat and nfa2dfa.bat scripts instead of
trying to call the Python code directly.

E.g.
   C:\Users\joe\scanner-builder> re2nfa -help


Here's a typical use of the scripts pipled together to generate
a DFA from a regular expression.

    $ ./re2nfa.py '(a|b)(a|b)*' | ./nfa2dfa.py -scan abbaabba
    --------------------------------------
    State A, ch = 'a',  ({0, 1, 2})
    State B, ch = 'b',  ({3, 5, 6, 7, 8, 9})
    State E, ch = 'b',  ({6, 7, 8, 9, 11, 12})
    State E, ch = 'a',  ({6, 7, 8, 9, 11, 12})
    State D, ch = 'a',  ({6, 7, 8, 9, 10, 12})
    State D, ch = 'b',  ({6, 7, 8, 9, 10, 12})
    State E, ch = 'b',  ({6, 7, 8, 9, 11, 12})
    State E, ch = 'a',  ({6, 7, 8, 9, 11, 12})
    State D, ch = '$',  ({6, 7, 8, 9, 10, 12})

    Matched (a|b)(a|b)*, string abbaabba
    --------------------------------------
    State A, ch = '$',  ({0, 1, 2})

    No match
    --------------------------------------
    $

Note that the NFA generator reads "simple" regular expressions
(alternation, concatenation, Kleene closure and parentheses).

The NFA generator can output the generated NFA as a plain-text
description, suitable for processing by nfa2dfa.  It can also
output a table representing the NFA (either plain-text or in LaTeX
tablur format), as a GraphViz input file (suitable for processing
by dot), or as a graphical representation -- either PostScript or
as a TkInter window).

The DFA generator either outputs a record of the operation of the 
subset algorithm to the terminal, or, with appropriate flags, a table
representation of the DFA, or a Graphviz representation.  Direct
generation of a graph (TkInter or PostScript) is not supported by
nfa2dfa, however.

nfa2dfa can additionally accept a string to be scanned on the
command-line when it is invoked, and will report details of the
scanning.

Note that the NFAs and DFAs generated by these programs support
matching multiple strings.  The DFAs are greedy.

Note that regular expressions containing spaces are handled
by these programs, but not very elegantly.  Generated state
machine graphs, in particular, don't distinguish between
transitions on "space-characters" and epsilon transitions.

The other Python files in this directory are the various
modules supporting the two main interface files.  Normally
they shouldn't be called directly.

Files:

nfa2dfa.py   -- main interface files.
re2nfa.py 

-----------------------------------------------------------------------------
fa.py        -- general finite automaton class.
dfa.py       -- deterministic finite automaton, inherits from FA.
nfa.py       -- nondeterministic automaton, inherits from FA.
state.py     -- Finite automaton state objects (State and DFAState).
dfamin.py    -- DFA minimiser.  Converts a DFA into its state-minimum
                equivalent.

connector.py -- Low-level code for drawing connections between states in
                a graphical representation of an automaton.
drawingsurface.py -- Low-level driver code for drawing to different output
                     devices (currently, TkCanvas surfaces and PostScript).

-----------------------------------------------------------------------------

Scanning using these programs
=============================

There is a command-line option ("-scan") available to "nfa2dfa.py" to allow
scanning (see above).  There is no analogous command-line option available
to allow NFAs to scan.  However, if you run up Python/Idle and start
up "re2nfa.py" from within Idle, it is possbile to carry out scanning of
strings using non-deterministic automata.  Here's an example (assume that 
Idle has loaded "re2nfa.py" into the shell):


      >>> nfa=parseREs('abb (a|b)*abb')
      >>> nfa.scan('abb')
      Initial set of states (before any input read): [0, 1, 5, 6, 7, 8, 9]
      (No current accepting state)
  
      Reading 'a' moves automaton to state set [2, 6, 7, 8, 9, 10, 11, 14]
      (No current accepting state)
  
      Reading 'b' moves automaton to state set [3, 6, 7, 8, 9, 12, 13, 14]
      (No current accepting state)
  
      Reading 'b' moves automaton to state set [4, 6, 7, 8, 9, 12, 14, 15]
      (Current accepting state(s) = [4, 15])
  
      All input read: scanner halted
      Final set of automaton states: [4, 6, 7, 8, 9, 12, 14, 15]
      Accepting states are: [4, 15]
      Machine accepts on state 4
      All input accepted

      >>> nfa.scan('abbaa')
      Initial set of states (before any input read): [0, 1, 5, 6, 7, 8, 9]
      (No current accepting state)
  
      Reading 'a' moves automaton to state set [2, 6, 7, 8, 9, 10, 11, 14]
      (No current accepting state)
  
      Reading 'b' moves automaton to state set [3, 6, 7, 8, 9, 12, 13, 14]
      (No current accepting state)
  
      Reading 'b' moves automaton to state set [4, 6, 7, 8, 9, 12, 14, 15]
      (Current accepting state(s) = [4, 15])
  
      Reading 'a' moves automaton to state set [6, 7, 8, 9, 10, 11, 14]
      (Current accepting state(s) = [4, 15]) , N.B., unchanged
  
      Reading 'a' moves automaton to state set [6, 7, 8, 9, 10, 11, 14]
      (Current accepting state(s) = [4, 15]) , N.B., unchanged
  
      All input read: scanner halted
      Final set of automaton states: [6, 7, 8, 9, 10, 11, 14]
      Accepting states are: [4, 15]
      Machine accepts on state 4
      Accepting state is not in the final set of NFA states => some input ignored


Here a non-Thompson NFA for the two RE's "abb" and "(A|b)*abb" is first
created using routine "parseREs".  A scan of the two strings "abb" and
"abbaa" is then carried out.

Note that the scanner keeps track of all the NFA state sets as it works,
in other words, it is performing a subset construction "on the fly" as
the parse is carried out.  

Note also that the scanner keeps track of the last accepting states 
found, and accepts on the lowest numbered such state when the end of
the input is encountered.  Thus in example 1 ("abb") the machine reads
all of the string "abb", and halts in state set [4, 6, 7, 8, 9, 12, 14, 15],
two of these halting states are accepting, [4, 15], and the machine
accepts on state 4 (which corresponds to recognizing the first of the
two possible matching RE's at this point, "abb").

In the second example ("abbaa") the machine halts in states [6, 7, 8, 9, 
10, 11, 14] having completely read the input.  None of these states is
accepting.  But previously the machine traversed accepting states
[4, 15], so it accepts 4.  Because the accepting state number is not
contained in the halting state set, the scanner flags that some of the
input will have been ignored.  A DFA scanner would rewind the input
to the point of the last accepting DFA state, but this NFA scanner
doesn't do this.

09/03/2016.

